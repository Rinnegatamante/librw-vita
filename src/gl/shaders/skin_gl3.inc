const char *skin_vert_src =
"void main(\n"
"	float3 in_pos,\n"
"	float3 in_normal,\n"
"	float4 in_color,\n"
"	float2 in_tex0,\n"
"	float4 in_weights,\n"
"	float4 in_indices,\n"
"	uniform float4x4 u_proj,\n"
"	uniform float4x4 u_world,\n"
"	uniform float4x4 u_view,\n"
"	uniform float4x4 u_texMatrix,\n"
"	uniform float4 u_ambLight,\n"
"	uniform float4 u_surfProps,\n"
"	uniform float4 u_fogData,\n"
"	uniform float4 u_matColor,\n"
"	uniform float4 u_lightParams[MAX_LIGHTS],\n"
"	uniform float4 u_lightDirection[MAX_LIGHTS],\n"
"	uniform float4 u_lightColor[MAX_LIGHTS],\n"
"	uniform float4x3 u_boneMatrices[64],\n"
"	float4 out v_color : COLOR0,\n"
"	float2 out v_tex0 : TEXCOORD0,\n"
"	float out v_fog : FOG,\n"
"	float4 out gl_Position : POSITION\n"
") {\n"
"	float3 SkinVertex = float3(0.0, 0.0, 0.0);\n"
"	float3 SkinNormal = float3(0.0, 0.0, 0.0);\n"
"	for(int i = 0; i < 4; i++){\n"
"		SkinVertex += (u_boneMatrices[int(in_indices[i])] * float4(in_pos, 1.0)).xyz * in_weights[i];\n"
"		SkinNormal += (float3x3(u_boneMatrices[int(in_indices[i])]) * in_normal) * in_weights[i];\n"
"	}\n"

"	float4 Vertex = u_world * float4(SkinVertex, 1.0);\n"
"	gl_Position = u_proj * u_view * Vertex;\n"
"	float3 Normal = mat3(u_world) * SkinNormal;\n"

"	v_tex0 = in_tex0;\n"

"	v_color = in_color;\n"
"	v_color.rgb += u_ambLight.rgb*surfAmbient;\n"
"	\n"
"	float3 color = float3(0.0, 0.0, 0.0);\n"
"	for(int i = 0; i < MAX_LIGHTS; i++){\n"
"		if(u_lightParams[i].x == 0.0)\n"
"			break;\n"
"		if(u_lightParams[i].x == 1.0){\n"
"			// direct\n"
"			float l = max(0.0, dot(Normal, -u_lightDirection[i].xyz));\n"
"			color += l*u_lightColor[i].rgb;\n"
"		}\n"
"	}\n"
"	\n"
"	v_color.rgb += color*surfDiffuse;\n"
"	v_color = clamp(v_color, 0.0, 1.0);\n"
"	v_color *= u_matColor;\n"

"	v_fog = DoFog(gl_Position.z, u_fogData);\n"
"}\n"
;
